#!/usr/bin/env python3
#
# This script estimates the cost of PBS jobs on gadi.
#
from sys import argv
from argparse import ArgumentParser
from enum import Enum
from gadi_queues import *

import traceback

class Job:
	"""
	Job resource metadata.

	@param ncpu: Number of CPUs.
	@param mem: Amount of memory (GiB).
	@param walltime: Amount of walltime (hours).
	@param queue: PBS queue.
	"""
	def __init__(self, ncpu: int, mem: int, walltime: float, queue: Queue):
		self.ncpu = ncpu
		self.mem = mem
		self.walltime = walltime
		self.queue = queue

class OutputUnits(Enum):
	HUMAN_READABLE = 0
	KSU = 1
	SU = 2

class Options:
	"""
	CLI options.

	@param job: Job metadata.
	@param units: Output units.
	"""
	def __init__(self, job: Job, units: OutputUnits):
		self.job = job
		self.units = units

def parse_args(argv: list[str]) -> Options:
	"""
	Parse CLI arguments, return a parsed options object.

	@param argv: Raw CLI arguments.

	@return Parsed Options object.
	"""
	parser = ArgumentParser(prog=argv[0], description = "Estimate PBS job costs on gadi")
	parser.add_argument("-c", "--cpu-count", type = int, required = True, help = "Number of CPUs")
	parser.add_argument("-m", "--memory", type = int, required = True, help = "Amount of memory in GiB")
	parser.add_argument("-w", "--walltime", type = int, required = True, help = "Amount of walltime in hours")
	parser.add_argument("-q", "--queue", default = QUEUE_NORMAL, help = f"PBS queue (default: {QUEUE_NORMAL})")

	group = parser.add_mutually_exclusive_group()
	group.add_argument("-k", "--ksu", action = "store_true", default = False, help = "Report cost in KSUs")
	group.add_argument("-s", "--su", action = "store_true", default = False, help = "Report output in SUs")
	group.add_argument("-H", "--human-readable", action = "store_true", default = True, help = "Report output in human-readable units (ie units vary with magnitude)")

	p = parser.parse_args(argv[1:])
	queue = get_queue(p.queue)
	units = OutputUnits.HUMAN_READABLE
	if p.ksu:
		units = OutputUnits.KSU
	elif p.su:
		units = OutputUnits.SU
	job = Job(p.cpu_count, p.memory, p.walltime, queue)
	return Options(job, units)

def get_cost(job: Job) -> float:
	"""
	Estimate the cost of a PBS job on gadi. Return the cost in KSUs.

	@param opts: Job options.
	"""
	walltime_limit = job.queue.get_walltime_limit(job.ncpu)
	if job.walltime > walltime_limit:
		raise ValueError(f"Walltime of {job.walltime} hours exceeds {job.queue.name} queue's maximum walltime, which is {walltime_limit} hours for {job.ncpu} CPUs")

	cpu_ratio = job.queue.cpus_per_node / job.ncpu
	mem_ratio = job.mem / job.queue.mem_per_node
	res2 = job.ncpu * max(1, cpu_ratio * mem_ratio)

	cost_su = job.walltime * res2 * job.queue.charge_rate
	return cost_su / 1000

def main(opts: Options):
	"""
	Main CLI entrypoint function.
	"""
	cost = get_cost(opts.job)
	units = "KSU"
	if opts.units == OutputUnits.SU:
		cost *= 1000
		units = "SU"
	if opts.units == OutputUnits.HUMAN_READABLE and cost < 1:
		cost *= 1000
		units = "SU"
	print(f"{cost} {units}")

if __name__ == "__main__":
	# Parse CLI args
	opts = parse_args(argv)

	try:
		# Actual logic is in main().
		main(opts)
	except BaseException as error:
		# Basic error handling.
		print(traceback.format_exc())
		exit(1)
